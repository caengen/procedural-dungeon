{"version":3,"sources":["types/Cell.ts","types/Directions.ts","types/MapType.ts","types/index.ts","components/Dungeon/Dungeon.style.tsx","components/Dungeon/Dungeon.tsx","components/App/App.style.ts","components/App/App.tsx","components/RandomWalk/RandomWalkInputs/RandomWalkInputs.tsx","helpers/filpPlusMinus/flipPlusMinus.ts","generation/randomWalk/randomWalk.ts","generation/createMap/createMap.ts","generation/randomWalk/excludeSameAndOppositeDirections/excludeSameAndOppositeDirections.ts","helpers/isOutOfBounds.ts","components/RandomWalk/RandomWalk.styles.ts","components/RandomWalk/RandomWalk.tsx","serviceWorker.ts","index.tsx"],"names":["CellType","__webpack_require__","d","__webpack_exports__","Directions","Direction","left","right","up","down","MapType","_Cell__WEBPACK_IMPORTED_MODULE_0__","o","_Directions__WEBPACK_IMPORTED_MODULE_1__","_MapType__WEBPACK_IMPORTED_MODULE_2__","Grid","styled","div","_templateObject","p","css","_templateObject2","dimensions","_templateObject3","Cell","_templateObject4","isWall","_templateObject5","Dungeon","renderCellRow","row","map","_this","renderCell","cell","react_default","a","createElement","key","concat","wall","matrix","this","props","length","React","Component","StyledApp","App_style_templateObject","GlobalStyle","createGlobalStyle","App_style_templateObject2","App","RandomWalk","RandomWalkInputs","_useState","useState","tunnels","maxTunnelLength","_useState2","Object","slicedToArray","state","updateState","updateInput","event","objectSpread","defineProperty","target","value","onChange","type","name","flipPlusMinus","n","Math","abs","randomWalk","params","rows","columns","i","j","push","createMap","lastDirection","undefined","tunnelsLeft","currRow","floor","random","currCol","direction","nextDirection","tunneled","tunnelLength","ceil","_nextPosition","nextPosition","maxDimension","nextRow","nextCol","collision","validDirections","opposite","filter","isEqual","excludeSameAndOppositeDirections","_direction2","col","isOutOfBounds","StyledRandomWalk","RandomWalk_styles_templateObject","_useState3","_useState4","updateMap","onClick","Dungeon_Dungeon","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07b04c64.chunk.js","sourcesContent":["enum CellType {\n  Wall,\n  Floor\n}\n\nexport interface Cell {\n  type: CellType;\n}","export const Direction = {\n  left: [-1, 0],\n  right: [1, 0],\n  up: [0, -1],\n  down: [0, 1]\n}\n\nexport const Directions = [ \n  Direction.left,\n  Direction.right,\n  Direction.up,\n  Direction.down\n];","export enum MapType {\n  floor = 0,\n  wall = 1\n}","export * from \"./Cell\";\nexport * from \"./Directions\";\nexport * from \"./MapType\";\nexport * from \"./RandomWalkParams\";","import styled, { css } from \"styled-components\";\n\ninterface GridProps {\n  dimensions: number;\n}\nexport const Grid = styled.div<GridProps>`\n  background-color: #6f7b7e;\n  display: grid;\n  ${p =>\n    css`\n      grid-template-columns: repeat(${p.dimensions}, 2em);\n    `}\n  ${p =>\n    css`\n      grid-template-rows: repeat(${p.dimensions}, 2em);\n    `}\n  width: min-content;\n`;\n\ninterface CellProps {\n  isWall?: boolean;\n}\nexport const Cell = styled.div<CellProps>`\n  color: #1c2224;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  ${p =>\n    p.isWall\n      ? css`\n          background-color: #1c2224;\n          color: #3a4548;\n        `\n      : \"\"}\n`;\n","import React from \"react\";\nimport { Grid, Cell } from \"./Dungeon.style\";\nimport { MapType } from \"src/types\";\n\nexport interface DungeonProps {\n  matrix: number[][];\n}\n\nexport default class Dungeon extends React.Component<DungeonProps> {\n  public render() {\n    const { matrix } = this.props;\n    return (\n      <Grid dimensions={matrix.length}>{matrix.map(this.renderCellRow)}</Grid>\n    );\n  }\n\n  private renderCellRow = (row: number[]) => row.map(this.renderCell);\n\n  private renderCell = (cell: number, row: number) => (\n    <Cell key={`${row}${cell}`} isWall={cell === MapType.wall}>\n      <code>{cell}</code>\n    </Cell>\n  );\n}\n","import styled, { createGlobalStyle } from \"styled-components\";\n\nexport const StyledApp = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n      \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n`;\n","import React, { Component } from \"react\";\nimport { RandomWalk } from \"src/components\";\nimport { StyledApp, GlobalStyle } from \"./App.style\";\n\nclass App extends Component {\n  render() {\n    return (\n      <StyledApp>\n        <GlobalStyle />\n        <RandomWalk />\n      </StyledApp>\n    );\n  }\n}\n\nexport default App;\n","import React, { useState, ChangeEvent } from \"react\";\nimport { RandomWalkParams } from \"src/types\";\n\nexport interface RandomWalkInputsProps {\n  onChange?: (params: RandomWalkParams) => void;\n}\n\ninterface State extends RandomWalkParams {}\n\nexport default function RandomWalkInputs(props: RandomWalkInputsProps) {\n  const [state, updateState] = useState<State>({\n    dimensions: 20,\n    tunnels: 50,\n    maxTunnelLength: 6\n  });\n\n  const updateInput = (key: keyof State) => (\n    event: ChangeEvent<HTMLInputElement>\n  ) => {\n    updateState({\n      ...state,\n      [key]: event.target.value\n    });\n    props.onChange && props.onChange(state);\n  };\n\n  return (\n    <div>\n      <input\n        type=\"number\"\n        name=\"dimensions\"\n        value={state.dimensions}\n        onChange={updateInput(\"dimensions\")}\n      />\n      <input\n        type=\"number\"\n        name=\"tunnels\"\n        value={state.tunnels}\n        onChange={updateInput(\"tunnels\")}\n      />\n      <input\n        type=\"number\"\n        name=\"tunnel length\"\n        value={state.maxTunnelLength}\n        onChange={updateInput(\"maxTunnelLength\")}\n      />\n    </div>\n  );\n}\n","export default function flipPlusMinus(n: number) {\n  if (n === 0) {\n    return n;\n  }\n\n  return n < 0 ? Math.abs(n) : -n;\n}\n","import { createMap } from \"src/generation\";\nimport { isOutOfBounds } from \"src/helpers\";\nimport { excludeSameAndOppositeDirections } from \"./excludeSameAndOppositeDirections\";\nimport { MapType } from \"src/types\";\n\nexport interface RandomWalkParams {\n  dimensions: number;\n  tunnels: number;\n  maxTunnelLength: number;\n}\nexport default function randomWalk(params: RandomWalkParams) {\n  const { dimensions, tunnels, maxTunnelLength } = params;\n  const map = createMap(dimensions, dimensions);\n\n  let lastDirection = undefined;\n  let tunnelsLeft = tunnels;\n\n  // Initialise with random position\n  let currRow = Math.floor(Math.random() * dimensions);\n  let currCol = Math.floor(Math.random() * dimensions);\n\n  while (tunnelsLeft > 0) {\n    let direction = nextDirection({ lastDirection });\n\n    let tunneled = 0;\n    let tunnelLength = Math.ceil(Math.random() * maxTunnelLength);\n    while (tunneled < tunnelLength) {\n      map[currRow][currCol] = MapType.floor;\n      tunneled++;\n\n      const { nextRow, nextCol, collision } = nextPosition({\n        currRow,\n        currCol,\n        direction,\n        maxDimension: dimensions\n      });\n\n      if (collision) {\n        break;\n      } else {\n        currRow = nextRow;\n        currCol = nextCol;\n      }\n    }\n\n    lastDirection = direction;\n    tunnelsLeft--;\n  }\n\n  return map;\n}\n\ninterface NextDirectionParams {\n  lastDirection?: number[];\n}\nfunction nextDirection(params: NextDirectionParams) {\n  const { lastDirection } = params;\n  let direction = undefined;\n  const validDirections = excludeSameAndOppositeDirections(lastDirection);\n\n  direction =\n    validDirections[Math.floor(Math.random() * validDirections.length)];\n\n  return direction;\n}\n\ninterface NextPositionParams {\n  currRow: number;\n  currCol: number;\n  direction: number[];\n  maxDimension: number;\n}\nfunction nextPosition(params: NextPositionParams) {\n  const { currRow, currCol, direction, maxDimension } = params;\n  const [rowModifier, colModifier] = direction;\n\n  const nextRow = currRow + rowModifier;\n  const nextCol = currCol + colModifier;\n\n  let outOfBounds = isOutOfBounds(nextRow, nextCol, maxDimension);\n\n  return {\n    nextRow,\n    nextCol,\n    collision: outOfBounds\n  };\n}\n","import { MapType } from \"src/types\";\n\nexport default function createMap(rows: number, columns: number) {\n  let matrix = [];\n\n  for (let i = 0; i < rows; i++) {\n    let row = [];\n    for (let j = 0; j < columns; j++) {\n      row.push(MapType.wall);\n    }\n    matrix.push(row);\n  }\n\n  return matrix;\n}\n","import { Directions } from \"src/types\";\nimport { filter, isEqual } from \"lodash\";\nimport { flipPlusMinus } from \"src/helpers\";\n\nexport default function excludeSameAndOppositeDirections(direction?: number[]) {\n  if (!direction) {\n    return Directions;\n  }\n\n  const opposite = direction.map(flipPlusMinus);\n  const excluded = filter(\n    Directions,\n    d => !(isEqual(d, direction) || isEqual(d, opposite))\n  );\n\n  return excluded;\n}\n","export function isOutOfBounds(row: number, col: number, maxDimension: number) {\n  return row < 0 || row >= maxDimension || col < 0 || col >= maxDimension;\n}\n","import styled from \"styled-components\";\n\nexport const StyledRandomWalk = styled.div`\n  cursor: pointer;\n  user-select: none;\n`;","import React, { useState } from \"react\";\nimport { RandomWalkInputs } from \"./RandomWalkInputs\";\nimport { RandomWalkParams } from \"src/types\";\nimport { Dungeon } from \"src/components\";\nimport { randomWalk } from \"src/generation\";\nimport { StyledRandomWalk } from \"./RandomWalk.styles\";\n\ninterface State extends RandomWalkParams {}\n\nexport default function RandomWalk() {\n  const [state, updateState] = useState<State>({\n    dimensions: 20,\n    tunnels: 50,\n    maxTunnelLength: 6\n  });\n  const [map, updateMap] = useState<number[][]>(randomWalk(state));\n  const handleClick = () => updateMap(randomWalk(state));\n\n  return (\n    <StyledRandomWalk onClick={handleClick}>\n      <RandomWalkInputs onChange={updateState} />\n      <Dungeon matrix={map} />\n    </StyledRandomWalk>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: any, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: any, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from 'src/components';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}